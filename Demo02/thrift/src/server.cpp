#if 1
// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
//
#include <iostream>
#include "Collect.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>

#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/processor/TMultiplexedProcessor.h>

#include <boost/thread/thread.hpp>
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;
using namespace ::apache::thrift::async;

#include "thriftlocal.h"

class CollectHandler : virtual public CollectIf {
 public:
  CollectHandler(ThriftLocal *tl) {
    // Your initialization goes here
      m_thriftlocal = tl;
  }

  bool OpenCard() {
    // Your implementation goes here
    printf("OpenCard\n");
    return m_thriftlocal->OpenCard();
  }

  bool Start() {
    // Your implementation goes here
    printf("Start\n");
    return m_thriftlocal->Start();
  }

  void GetLastError(std::string& _return) {
    // Your implementation goes here
    printf("GetLastError\n");
  }

  void GetStatus(std::string& _return) {
    // Your implementation goes here
    printf("GetStatus\n");
    _return = m_thriftlocal->GetStatus();
  }


  void SetParam(const int32_t triggerType,
                const int32_t clockType,
                const double clockFreq,
                const int32_t ddcCoefType,
                const int32_t sourceType,
                const int32_t nCh,
                const double DDCFreq,
                const int32_t nMultiple,
                const int32_t streamMode,
                const int64_t sTime,
                const std::string& fileName,
                const double fileSize,
                const std::string& ipaddr,
                const int32_t port) {
    // Your implementation goes here
    printf("SetParam\n");
    m_thriftlocal->SetParam(triggerType,
                            clockType, clockFreq, ddcCoefType, sourceType, nCh, DDCFreq, nMultiple, streamMode, sTime, fileName, fileSize, ipaddr, port);
  }

  void message(Message& _return, const Message& msg) {
    // Your implementation goes here
    printf("message\n");
  }
private:
    ThriftLocal *m_thriftlocal;
};

// using boost::shared_ptr;
int thrift_run(int portNum, ThriftLocal *tl) {
	//LOGThrift("thrift_run开始调用")
		//int port = 9090;
	int port = portNum;
    ::apache::thrift::stdcxx::shared_ptr<CollectHandler> handler(new CollectHandler(tl));

	//LOGThrift("CollectHandler 实例化完毕")
		::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new CollectProcessor(handler));
	//LOGThrift("TProcessor 实例化完毕")
		::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	//LOGThrift("TServerTransport 实例化完毕")
		::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	//LOGThrift("TTransportFactory 实例化完毕")
		::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
	//LOGThrift("TProtocolFactory 实例化完毕")

		TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	//LOGThrift("TSimpleServer 实例化完毕")
		server.serve();
		
	//LOGThrift("server 调用完毕")
		return 0;
}

int thrift_main(int portNum, ThriftLocal *tl) {

	//LOGThrift("CollectHandler 实例化完毕")("----thrift_main调用开始----");
    boost::thread thr(thrift_run, portNum, tl);
	thr.detach();
	return 0;
}
#endif
