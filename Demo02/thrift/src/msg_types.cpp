#if 1
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "msg_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Message::~Message() throw() {
}


void Message::__set_type(const int32_t val) {
  this->type = val;
}

void Message::__set_tag(const std::string& val) {
  this->tag = val;
}

void Message::__set_group(const int32_t val) {
  this->group = val;
}

void Message::__set_chan(const int32_t val) {
  this->chan = val;
}

void Message::__set_index(const int32_t val) {
  this->index = val;
}

void Message::__set_param0(const int32_t val) {
  this->param0 = val;
}

void Message::__set_param1(const int32_t val) {
  this->param1 = val;
}

void Message::__set_param2(const int32_t val) {
  this->param2 = val;
}

void Message::__set_param3(const int32_t val) {
  this->param3 = val;
}

void Message::__set_param4(const int32_t val) {
  this->param4 = val;
}

void Message::__set_param5(const int32_t val) {
  this->param5 = val;
}

void Message::__set_msg(const std::string& val) {
  this->msg = val;
}

void Message::__set_bmsg(const std::string& val) {
  this->bmsg = val;
}
std::ostream& operator<<(std::ostream& out, const Message& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chan);
          this->__isset.chan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->param0);
          this->__isset.param0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->param1);
          this->__isset.param1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->param2);
          this->__isset.param2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->param3);
          this->__isset.param3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->param4);
          this->__isset.param4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->param5);
          this->__isset.param5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bmsg);
          this->__isset.bmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->chan);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param0", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->param0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param1", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->param1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param2", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->param2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param3", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->param3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param4", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->param4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param5", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->param5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bmsg", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeBinary(this->bmsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.tag, b.tag);
  swap(a.group, b.group);
  swap(a.chan, b.chan);
  swap(a.index, b.index);
  swap(a.param0, b.param0);
  swap(a.param1, b.param1);
  swap(a.param2, b.param2);
  swap(a.param3, b.param3);
  swap(a.param4, b.param4);
  swap(a.param5, b.param5);
  swap(a.msg, b.msg);
  swap(a.bmsg, b.bmsg);
  swap(a.__isset, b.__isset);
}

Message::Message(const Message& other0) {
  type = other0.type;
  tag = other0.tag;
  group = other0.group;
  chan = other0.chan;
  index = other0.index;
  param0 = other0.param0;
  param1 = other0.param1;
  param2 = other0.param2;
  param3 = other0.param3;
  param4 = other0.param4;
  param5 = other0.param5;
  msg = other0.msg;
  bmsg = other0.bmsg;
  __isset = other0.__isset;
}
Message& Message::operator=(const Message& other1) {
  type = other1.type;
  tag = other1.tag;
  group = other1.group;
  chan = other1.chan;
  index = other1.index;
  param0 = other1.param0;
  param1 = other1.param1;
  param2 = other1.param2;
  param3 = other1.param3;
  param4 = other1.param4;
  param5 = other1.param5;
  msg = other1.msg;
  bmsg = other1.bmsg;
  __isset = other1.__isset;
  return *this;
}
void Message::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Message(";
  out << "type=" << to_string(type);
  out << ", " << "tag=" << to_string(tag);
  out << ", " << "group=" << to_string(group);
  out << ", " << "chan=" << to_string(chan);
  out << ", " << "index=" << to_string(index);
  out << ", " << "param0=" << to_string(param0);
  out << ", " << "param1=" << to_string(param1);
  out << ", " << "param2=" << to_string(param2);
  out << ", " << "param3=" << to_string(param3);
  out << ", " << "param4=" << to_string(param4);
  out << ", " << "param5=" << to_string(param5);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "bmsg=" << to_string(bmsg);
  out << ")";
}
#endif

