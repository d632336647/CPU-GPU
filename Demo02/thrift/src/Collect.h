#if 1
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Collect_H
#define Collect_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/stdcxx.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "msg_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CollectIf {
 public:
  virtual ~CollectIf() {}
  virtual bool OpenCard() = 0;
  virtual bool Start() = 0;
  virtual void GetLastError(std::string& _return) = 0;
  virtual void GetStatus(std::string& _return) = 0;
  virtual void SetParam(const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port) = 0;
  virtual void message(Message& _return, const Message& msg) = 0;
};

class CollectIfFactory {
 public:
  typedef CollectIf Handler;

  virtual ~CollectIfFactory() {}

  virtual CollectIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CollectIf* /* handler */) = 0;
};

class CollectIfSingletonFactory : virtual public CollectIfFactory {
 public:
  CollectIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<CollectIf>& iface) : iface_(iface) {}
  virtual ~CollectIfSingletonFactory() {}

  virtual CollectIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CollectIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<CollectIf> iface_;
};

class CollectNull : virtual public CollectIf {
 public:
  virtual ~CollectNull() {}
  bool OpenCard() {
    bool _return = false;
    return _return;
  }
  bool Start() {
    bool _return = false;
    return _return;
  }
  void GetLastError(std::string& /* _return */) {
    return;
  }
  void GetStatus(std::string& /* _return */) {
    return;
  }
  void SetParam(const int32_t /* triggerType */, const int32_t /* clockType */, const double /* clockFreq */, const int32_t /* ddcCoefType */, const int32_t /* sourceType */, const int32_t /* nCh */, const double /* DDCFreq */, const int32_t /* nMultiple */, const int32_t /* streamMode */, const int64_t /* sTime */, const std::string& /* fileName */, const double /* fileSize */, const std::string& /* ipaddr */, const int32_t /* port */) {
    return;
  }
  void message(Message& /* _return */, const Message& /* msg */) {
    return;
  }
};


class Collect_OpenCard_args {
 public:

  Collect_OpenCard_args(const Collect_OpenCard_args&);
  Collect_OpenCard_args& operator=(const Collect_OpenCard_args&);
  Collect_OpenCard_args() {
  }

  virtual ~Collect_OpenCard_args() throw();

  bool operator == (const Collect_OpenCard_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Collect_OpenCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_OpenCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_OpenCard_pargs {
 public:


  virtual ~Collect_OpenCard_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_OpenCard_result__isset {
  _Collect_OpenCard_result__isset() : success(false) {}
  bool success :1;
} _Collect_OpenCard_result__isset;

class Collect_OpenCard_result {
 public:

  Collect_OpenCard_result(const Collect_OpenCard_result&);
  Collect_OpenCard_result& operator=(const Collect_OpenCard_result&);
  Collect_OpenCard_result() : success(0) {
  }

  virtual ~Collect_OpenCard_result() throw();
  bool success;

  _Collect_OpenCard_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Collect_OpenCard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Collect_OpenCard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_OpenCard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_OpenCard_presult__isset {
  _Collect_OpenCard_presult__isset() : success(false) {}
  bool success :1;
} _Collect_OpenCard_presult__isset;

class Collect_OpenCard_presult {
 public:


  virtual ~Collect_OpenCard_presult() throw();
  bool* success;

  _Collect_OpenCard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_Start_args {
 public:

  Collect_Start_args(const Collect_Start_args&);
  Collect_Start_args& operator=(const Collect_Start_args&);
  Collect_Start_args() {
  }

  virtual ~Collect_Start_args() throw();

  bool operator == (const Collect_Start_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Collect_Start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_Start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_Start_pargs {
 public:


  virtual ~Collect_Start_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_Start_result__isset {
  _Collect_Start_result__isset() : success(false) {}
  bool success :1;
} _Collect_Start_result__isset;

class Collect_Start_result {
 public:

  Collect_Start_result(const Collect_Start_result&);
  Collect_Start_result& operator=(const Collect_Start_result&);
  Collect_Start_result() : success(0) {
  }

  virtual ~Collect_Start_result() throw();
  bool success;

  _Collect_Start_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Collect_Start_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Collect_Start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_Start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_Start_presult__isset {
  _Collect_Start_presult__isset() : success(false) {}
  bool success :1;
} _Collect_Start_presult__isset;

class Collect_Start_presult {
 public:


  virtual ~Collect_Start_presult() throw();
  bool* success;

  _Collect_Start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_GetLastError_args {
 public:

  Collect_GetLastError_args(const Collect_GetLastError_args&);
  Collect_GetLastError_args& operator=(const Collect_GetLastError_args&);
  Collect_GetLastError_args() {
  }

  virtual ~Collect_GetLastError_args() throw();

  bool operator == (const Collect_GetLastError_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Collect_GetLastError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_GetLastError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_GetLastError_pargs {
 public:


  virtual ~Collect_GetLastError_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_GetLastError_result__isset {
  _Collect_GetLastError_result__isset() : success(false) {}
  bool success :1;
} _Collect_GetLastError_result__isset;

class Collect_GetLastError_result {
 public:

  Collect_GetLastError_result(const Collect_GetLastError_result&);
  Collect_GetLastError_result& operator=(const Collect_GetLastError_result&);
  Collect_GetLastError_result() : success() {
  }

  virtual ~Collect_GetLastError_result() throw();
  std::string success;

  _Collect_GetLastError_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Collect_GetLastError_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Collect_GetLastError_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_GetLastError_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_GetLastError_presult__isset {
  _Collect_GetLastError_presult__isset() : success(false) {}
  bool success :1;
} _Collect_GetLastError_presult__isset;

class Collect_GetLastError_presult {
 public:


  virtual ~Collect_GetLastError_presult() throw();
  std::string* success;

  _Collect_GetLastError_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_GetStatus_args {
 public:

  Collect_GetStatus_args(const Collect_GetStatus_args&);
  Collect_GetStatus_args& operator=(const Collect_GetStatus_args&);
  Collect_GetStatus_args() {
  }

  virtual ~Collect_GetStatus_args() throw();

  bool operator == (const Collect_GetStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Collect_GetStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_GetStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_GetStatus_pargs {
 public:


  virtual ~Collect_GetStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_GetStatus_result__isset {
  _Collect_GetStatus_result__isset() : success(false) {}
  bool success :1;
} _Collect_GetStatus_result__isset;

class Collect_GetStatus_result {
 public:

  Collect_GetStatus_result(const Collect_GetStatus_result&);
  Collect_GetStatus_result& operator=(const Collect_GetStatus_result&);
  Collect_GetStatus_result() : success() {
  }

  virtual ~Collect_GetStatus_result() throw();
  std::string success;

  _Collect_GetStatus_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Collect_GetStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Collect_GetStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_GetStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_GetStatus_presult__isset {
  _Collect_GetStatus_presult__isset() : success(false) {}
  bool success :1;
} _Collect_GetStatus_presult__isset;

class Collect_GetStatus_presult {
 public:


  virtual ~Collect_GetStatus_presult() throw();
  std::string* success;

  _Collect_GetStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_SetParam_args__isset {
  _Collect_SetParam_args__isset() : triggerType(false), clockType(false), clockFreq(false), ddcCoefType(false), sourceType(false), nCh(false), DDCFreq(false), nMultiple(false), streamMode(false), sTime(false), fileName(false), fileSize(false), ipaddr(false), port(false) {}
  bool triggerType :1;
  bool clockType :1;
  bool clockFreq :1;
  bool ddcCoefType :1;
  bool sourceType :1;
  bool nCh :1;
  bool DDCFreq :1;
  bool nMultiple :1;
  bool streamMode :1;
  bool sTime :1;
  bool fileName :1;
  bool fileSize :1;
  bool ipaddr :1;
  bool port :1;
} _Collect_SetParam_args__isset;

class Collect_SetParam_args {
 public:

  Collect_SetParam_args(const Collect_SetParam_args&);
  Collect_SetParam_args& operator=(const Collect_SetParam_args&);
  Collect_SetParam_args() : triggerType(0), clockType(0), clockFreq(0), ddcCoefType(0), sourceType(0), nCh(0), DDCFreq(0), nMultiple(0), streamMode(0), sTime(0), fileName(), fileSize(0), ipaddr(), port(0) {
  }

  virtual ~Collect_SetParam_args() throw();
  int32_t triggerType;
  int32_t clockType;
  double clockFreq;
  int32_t ddcCoefType;
  int32_t sourceType;
  int32_t nCh;
  double DDCFreq;
  int32_t nMultiple;
  int32_t streamMode;
  int64_t sTime;
  std::string fileName;
  double fileSize;
  std::string ipaddr;
  int32_t port;

  _Collect_SetParam_args__isset __isset;

  void __set_triggerType(const int32_t val);

  void __set_clockType(const int32_t val);

  void __set_clockFreq(const double val);

  void __set_ddcCoefType(const int32_t val);

  void __set_sourceType(const int32_t val);

  void __set_nCh(const int32_t val);

  void __set_DDCFreq(const double val);

  void __set_nMultiple(const int32_t val);

  void __set_streamMode(const int32_t val);

  void __set_sTime(const int64_t val);

  void __set_fileName(const std::string& val);

  void __set_fileSize(const double val);

  void __set_ipaddr(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const Collect_SetParam_args & rhs) const
  {
    if (!(triggerType == rhs.triggerType))
      return false;
    if (!(clockType == rhs.clockType))
      return false;
    if (!(clockFreq == rhs.clockFreq))
      return false;
    if (!(ddcCoefType == rhs.ddcCoefType))
      return false;
    if (!(sourceType == rhs.sourceType))
      return false;
    if (!(nCh == rhs.nCh))
      return false;
    if (!(DDCFreq == rhs.DDCFreq))
      return false;
    if (!(nMultiple == rhs.nMultiple))
      return false;
    if (!(streamMode == rhs.streamMode))
      return false;
    if (!(sTime == rhs.sTime))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    if (!(fileSize == rhs.fileSize))
      return false;
    if (!(ipaddr == rhs.ipaddr))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const Collect_SetParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_SetParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_SetParam_pargs {
 public:


  virtual ~Collect_SetParam_pargs() throw();
  const int32_t* triggerType;
  const int32_t* clockType;
  const double* clockFreq;
  const int32_t* ddcCoefType;
  const int32_t* sourceType;
  const int32_t* nCh;
  const double* DDCFreq;
  const int32_t* nMultiple;
  const int32_t* streamMode;
  const int64_t* sTime;
  const std::string* fileName;
  const double* fileSize;
  const std::string* ipaddr;
  const int32_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_SetParam_result {
 public:

  Collect_SetParam_result(const Collect_SetParam_result&);
  Collect_SetParam_result& operator=(const Collect_SetParam_result&);
  Collect_SetParam_result() {
  }

  virtual ~Collect_SetParam_result() throw();

  bool operator == (const Collect_SetParam_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Collect_SetParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_SetParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_SetParam_presult {
 public:


  virtual ~Collect_SetParam_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_message_args__isset {
  _Collect_message_args__isset() : msg(false) {}
  bool msg :1;
} _Collect_message_args__isset;

class Collect_message_args {
 public:

  Collect_message_args(const Collect_message_args&);
  Collect_message_args& operator=(const Collect_message_args&);
  Collect_message_args() {
  }

  virtual ~Collect_message_args() throw();
  Message msg;

  _Collect_message_args__isset __isset;

  void __set_msg(const Message& val);

  bool operator == (const Collect_message_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Collect_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Collect_message_pargs {
 public:


  virtual ~Collect_message_pargs() throw();
  const Message* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_message_result__isset {
  _Collect_message_result__isset() : success(false) {}
  bool success :1;
} _Collect_message_result__isset;

class Collect_message_result {
 public:

  Collect_message_result(const Collect_message_result&);
  Collect_message_result& operator=(const Collect_message_result&);
  Collect_message_result() {
  }

  virtual ~Collect_message_result() throw();
  Message success;

  _Collect_message_result__isset __isset;

  void __set_success(const Message& val);

  bool operator == (const Collect_message_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Collect_message_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Collect_message_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Collect_message_presult__isset {
  _Collect_message_presult__isset() : success(false) {}
  bool success :1;
} _Collect_message_presult__isset;

class Collect_message_presult {
 public:


  virtual ~Collect_message_presult() throw();
  Message* success;

  _Collect_message_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class CollectClient : virtual public CollectIf {
 public:
  CollectClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CollectClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool OpenCard();
  void send_OpenCard();
  bool recv_OpenCard();
  bool Start();
  void send_Start();
  bool recv_Start();
  void GetLastError(std::string& _return);
  void send_GetLastError();
  void recv_GetLastError(std::string& _return);
  void GetStatus(std::string& _return);
  void send_GetStatus();
  void recv_GetStatus(std::string& _return);
  void SetParam(const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port);
  void send_SetParam(const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port);
  void recv_SetParam();
  void message(Message& _return, const Message& msg);
  void send_message(const Message& msg);
  void recv_message(Message& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CollectProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<CollectIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CollectProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_OpenCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLastError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CollectProcessor(::apache::thrift::stdcxx::shared_ptr<CollectIf> iface) :
    iface_(iface) {
    processMap_["OpenCard"] = &CollectProcessor::process_OpenCard;
    processMap_["Start"] = &CollectProcessor::process_Start;
    processMap_["GetLastError"] = &CollectProcessor::process_GetLastError;
    processMap_["GetStatus"] = &CollectProcessor::process_GetStatus;
    processMap_["SetParam"] = &CollectProcessor::process_SetParam;
    processMap_["message"] = &CollectProcessor::process_message;
  }

  virtual ~CollectProcessor() {}
};

class CollectProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CollectProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< CollectIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< CollectIfFactory > handlerFactory_;
};

class CollectMultiface : virtual public CollectIf {
 public:
  CollectMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<CollectIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CollectMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<CollectIf> > ifaces_;
  CollectMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<CollectIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool OpenCard() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OpenCard();
    }
    return ifaces_[i]->OpenCard();
  }

  bool Start() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Start();
    }
    return ifaces_[i]->Start();
  }

  void GetLastError(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetLastError(_return);
    }
    ifaces_[i]->GetLastError(_return);
    return;
  }

  void GetStatus(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetStatus(_return);
    }
    ifaces_[i]->GetStatus(_return);
    return;
  }

  void SetParam(const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetParam(triggerType, clockType, clockFreq, ddcCoefType, sourceType, nCh, DDCFreq, nMultiple, streamMode, sTime, fileName, fileSize, ipaddr, port);
    }
    ifaces_[i]->SetParam(triggerType, clockType, clockFreq, ddcCoefType, sourceType, nCh, DDCFreq, nMultiple, streamMode, sTime, fileName, fileSize, ipaddr, port);
  }

  void message(Message& _return, const Message& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->message(_return, msg);
    }
    ifaces_[i]->message(_return, msg);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CollectConcurrentClient : virtual public CollectIf {
 public:
  CollectConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CollectConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool OpenCard();
  int32_t send_OpenCard();
  bool recv_OpenCard(const int32_t seqid);
  bool Start();
  int32_t send_Start();
  bool recv_Start(const int32_t seqid);
  void GetLastError(std::string& _return);
  int32_t send_GetLastError();
  void recv_GetLastError(std::string& _return, const int32_t seqid);
  void GetStatus(std::string& _return);
  int32_t send_GetStatus();
  void recv_GetStatus(std::string& _return, const int32_t seqid);
  void SetParam(const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port);
  int32_t send_SetParam(const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port);
  void recv_SetParam(const int32_t seqid);
  void message(Message& _return, const Message& msg);
  int32_t send_message(const Message& msg);
  void recv_message(Message& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class CollectCobClient;

class CollectCobClIf {
 public:
  virtual ~CollectCobClIf() {}
  virtual void OpenCard(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob) = 0;
  virtual void Start(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob) = 0;
  virtual void GetLastError(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob) = 0;
  virtual void GetStatus(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob) = 0;
  virtual void SetParam(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob, const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port) = 0;
  virtual void message(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob, const Message& msg) = 0;
};

class CollectCobSvIf {
 public:
  virtual ~CollectCobSvIf() {}
  virtual void OpenCard(::apache::thrift::stdcxx::function<void(bool const& _return)> cob) = 0;
  virtual void Start(::apache::thrift::stdcxx::function<void(bool const& _return)> cob) = 0;
  virtual void GetLastError(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob) = 0;
  virtual void GetStatus(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob) = 0;
  virtual void SetParam(::apache::thrift::stdcxx::function<void()> cob, const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port) = 0;
  virtual void message(::apache::thrift::stdcxx::function<void(Message const& _return)> cob, const Message& msg) = 0;
};

class CollectCobSvIfFactory {
 public:
  typedef CollectCobSvIf Handler;

  virtual ~CollectCobSvIfFactory() {}

  virtual CollectCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CollectCobSvIf* /* handler */) = 0;
};

class CollectCobSvIfSingletonFactory : virtual public CollectCobSvIfFactory {
 public:
  CollectCobSvIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<CollectCobSvIf>& iface) : iface_(iface) {}
  virtual ~CollectCobSvIfSingletonFactory() {}

  virtual CollectCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CollectCobSvIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<CollectCobSvIf> iface_;
};

class CollectCobSvNull : virtual public CollectCobSvIf {
 public:
  virtual ~CollectCobSvNull() {}
  void OpenCard(::apache::thrift::stdcxx::function<void(bool const& _return)> cob) {
    bool _return = false;
    return cob(_return);
  }
  void Start(::apache::thrift::stdcxx::function<void(bool const& _return)> cob) {
    bool _return = false;
    return cob(_return);
  }
  void GetLastError(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob) {
    std::string _return;
    return cob(_return);
  }
  void GetStatus(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob) {
    std::string _return;
    return cob(_return);
  }
  void SetParam(::apache::thrift::stdcxx::function<void()> cob, const int32_t /* triggerType */, const int32_t /* clockType */, const double /* clockFreq */, const int32_t /* ddcCoefType */, const int32_t /* sourceType */, const int32_t /* nCh */, const double /* DDCFreq */, const int32_t /* nMultiple */, const int32_t /* streamMode */, const int64_t /* sTime */, const std::string& /* fileName */, const double /* fileSize */, const std::string& /* ipaddr */, const int32_t /* port */) {
    return cob();
  }
  void message(::apache::thrift::stdcxx::function<void(Message const& _return)> cob, const Message& /* msg */) {
    Message _return;
    return cob(_return);
  }
};

class CollectCobClient : virtual public CollectCobClIf {
 public:
  CollectCobClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void OpenCard(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob);
  void send_OpenCard();
  bool recv_OpenCard();
  void Start(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob);
  void send_Start();
  bool recv_Start();
  void GetLastError(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob);
  void send_GetLastError();
  void recv_GetLastError(std::string& _return);
  void GetStatus(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob);
  void send_GetStatus();
  void recv_GetStatus(std::string& _return);
  void SetParam(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob, const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port);
  void send_SetParam(const int32_t triggerType, const int32_t clockType, const double clockFreq, const int32_t ddcCoefType, const int32_t sourceType, const int32_t nCh, const double DDCFreq, const int32_t nMultiple, const int32_t streamMode, const int64_t sTime, const std::string& fileName, const double fileSize, const std::string& ipaddr, const int32_t port);
  void recv_SetParam();
  void message(::apache::thrift::stdcxx::function<void(CollectCobClient* client)> cob, const Message& msg);
  void send_message(const Message& msg);
  void recv_message(Message& _return);
 protected:
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CollectAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<CollectCobSvIf> iface_;
  virtual void dispatchCall(::apache::thrift::stdcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (CollectAsyncProcessor::*ProcessFunction)(::apache::thrift::stdcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_OpenCard(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_OpenCard(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_OpenCard(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_Start(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_Start(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_Start(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_GetLastError(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_GetLastError(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_GetLastError(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_GetStatus(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_GetStatus(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_GetStatus(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_SetParam(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_SetParam(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_SetParam(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_message(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_message(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const Message& _return);
  void throw_message(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  CollectAsyncProcessor(::apache::thrift::stdcxx::shared_ptr<CollectCobSvIf> iface) :
    iface_(iface) {
    processMap_["OpenCard"] = &CollectAsyncProcessor::process_OpenCard;
    processMap_["Start"] = &CollectAsyncProcessor::process_Start;
    processMap_["GetLastError"] = &CollectAsyncProcessor::process_GetLastError;
    processMap_["GetStatus"] = &CollectAsyncProcessor::process_GetStatus;
    processMap_["SetParam"] = &CollectAsyncProcessor::process_SetParam;
    processMap_["message"] = &CollectAsyncProcessor::process_message;
  }

  virtual ~CollectAsyncProcessor() {}
};

class CollectAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  CollectAsyncProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< CollectCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< CollectCobSvIfFactory > handlerFactory_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

#endif



#endif
